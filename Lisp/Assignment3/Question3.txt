;My function that takes a list and return a list that does not contain any duplicates
(defun my-eliminateDuplicates (L)
(cond ((null L) L)
((member (car L) (cdr L))
(my-eliminateDuplicates (cdr L)))
(t (cons (car L) (my-eliminateDuplicates (cdr L))))))


(defun flattened_list(lst)
   (cond ((null lst) nil)
       ((atom (car lst))
           ; check if atom number or not
           (cond ((not(numberp (car lst))) (my-eliminateDuplicates (flattened_list (cdr lst))))
               ; if a number we add 
               (t (my-eliminateDuplicates (cons (car lst) (flattened_list (cdr lst)))))))
       ; if (car element) is not atom
       (t (my-eliminateDuplicates (append (flattened_list (car lst)) (flattened_list(cdr lst)))))))

(print '(1 2 (3 1) (a) (a 2.5) (2 4.5) ((1 2))))
(print ( flattened_list'(1 2 (3 1) (a) (bb) (a) (a 2.5) (2 4.5) ((1 2)))))